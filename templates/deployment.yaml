{{- $tplfullname := (include "fullname" . ) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.strategy.type }}
    {{- if eq "RollingUpdate" .Values.strategy.type }}
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable }}
    {{- end }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: {{ .Values.service.name }}
              containerPort: {{ .Values.service.internalPort }}
              protocol: TCP
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          {{- if .Values.env.envList }}
          env:
            {{- range $key, $value := .Values.env.envList }}
            - name: {{ $key | quote }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            {{- if eq "httpGet" .Values.readinessProbe.type }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.service.internalPort }}
            {{- else if eq "exec" .Values.readinessProbe.type }}
            exec: 
              command:
              {{- range .Values.readinessProbe.command }}
              - {{ . }}
              {{- end }}
            {{- else if eq "tcpSocket" .Values.readinessProbe.type }}
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            {{- if eq "httpGet" .Values.livenessProbe.type }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.service.internalPort }}
            {{- else if eq "exec" .Values.livenessProbe.type }}
            exec:
              command:
              {{- range .Values.livenessProbe.command }}
              - {{ . }}
              {{- end }}
            {{- else if eq "tcpSocket" .Values.livenessProbe.type }}
            tcpSocket:
              port: {{ .Values.service.internalPort }}
            {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.lifecycle.prestop.enabled }}
          lifecycle:
            preStop:
              exec:
                command:
                {{- range .Values.lifecycle.prestop.command }}
                - {{ . }}
                {{- end }}
          {{- end }}
          volumeMounts:
          {{- range .Values.persistence.pvcList }}
          - mountPath: {{ .mountPath }}
            name: {{ .name }}
          {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      volumes:
      {{- if .Values.persistence.enabled }}
      {{- range .Values.persistence.pvcList }}
      - name: {{ .name }}
        persistentVolumeClaim:
          claimName: {{ coalesce .existingVolumeClaim (printf "%s-%s" $.Release.Name .name) }}
      {{- end }}
      {{- else }}
      {{- range .Values.persistence.pvcList }}
      - name: {{ .name }}
        emptyDir: {}
      {{- end }}
      {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.hostAlias }}
      hostAliases:
      {{- range .Values.hostAlias }}
      - ip: {{ .ip | quote }}
        hostnames:
        {{- range .hostnames }}
        - {{ .hostname  | quote }}
        {{- end }}
      {{- end }}
      {{- end }}
